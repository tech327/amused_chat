def get_sql_from_gpt(user_query):
    prompt = f"""
You are an AI that converts user questions into MySQL queries.

The table name is `events` with columns:
id, title, address, lat, long, date_time, about, category_id, rating, user_id, created_at, link, visible_date, recurring, end_date, weekdays, dates, all_time, selected_weeks.

Note:
- The `date_time` column is stored as a string in the format: `%d/%m/%Y,%H : %i`
- When filtering or comparing dates, convert it using:
  STR_TO_DATE(date_time, '%d/%m/%Y,%H : %i')

Only return valid SELECT SQL queries. Avoid comments or explanation.

User query: "{user_query}"
SQL:
"""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    sql = response.choices[0].message.content.strip().strip(';').strip('"')
    return sql


# this is for routing the api 
@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    user_query = data.get("query")

    if not user_query:
        return jsonify({"error": "Missing query"}), 400

    try:
        sql = get_sql_from_gpt(user_query)
        cursor.execute(sql)
        results = cursor.fetchall()

        if not results:
            return jsonify({
                "sql": sql,
                "results": [],
                "message": " no info for the given input."
            })

        return jsonify({
            "sql": sql,
            "results": results
        })
# these is for exception handling i hvae written 
    except Exception as e:
        return jsonify({"error": str(e)}), 500





def get_sql_from_gpt(user_query):
    prompt = f"""
You are an AI that converts user questions into MySQL queries.
The table name is `events` with columns:
id, title, address, lat, long, date_time, about, category_id, rating, user_id, created_at, link, visible_date, recurring, end_date, weekdays, dates, all_time, selected_weeks.

Return only a valid MySQL SELECT query. DO NOT include markdown (like ```sql) or comments. Only return the SQL.
The date_time column is in string format like '20/06/2025,20 : 30'.
Use STR_TO_DATE(date_time, '%d/%m/%Y,%H : %i') for comparisons.

The column `category_id` is an integer. You must not compare it to strings like 'music'. Use the correct numeric ID.
If the user says a category like "music", assume its ID is 6.


User query: "{user_query}"
"""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    sql = response.choices[0].message.content.strip().strip('`').replace("```sql", "").replace("```", "")
    return sql







class ActionFetchEventData(Action):
    def name(self) -> Text:
        return "action_fetch_event_data"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_query = tracker.latest_message.get("text")

        try:
            sql = generate_sql_from_gpt(user_query)
            cursor.execute(sql)
            results = cursor.fetchall()
            output = format_events(results)
        except Exception as e:
            output = f" Error: {str(e)}"

        dispatcher.utter_message(text=output)
        return []








from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import mysql.connector
import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# DB connection
db_config = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_NAME"),
    "port": 3306
}
db = mysql.connector.connect(**db_config)
cursor = db.cursor(dictionary=True)

def generate_sql_from_gpt(query: str) -> str:
    prompt = f"""
You are an AI that converts natural language into MySQL SELECT queries.
The table is `events` with columns: id, title, address, lat, long, date_time, about, category_id, rating, user_id, created_at, link, visible_date, recurring, end_date, weekdays, dates, all_time, selected_weeks.
Use STR_TO_DATE(date_time, '%d/%m/%Y,%H : %i') for date comparisons.
Category mapping:
• music → 6
• sports → 3
• art → 4
• education → 5
• tech → 2
• food → 7
Only return a SELECT statement with LIMIT 10.
User query: "{query}"
"""
    res = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    sql = res.choices[0].message.content.strip().replace("```sql", "").replace("```", "")
    return sql

def format_events(events: List[Dict]) -> str:
    if not events:
        return "No matching events found."

    prompt = f"""
You are an assistant that formats a list of events into a readable summary.
Include:
- Title 
- Date & Time 
- Location 
- Link 🌐
- Rating 
- About ℹ

Events:
{events}
"""
    res = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5
    )
    return res.choices[0].message.content.strip()

class ActionFetchEventData(Action):
    def name(self) -> Text:
        return "action_fetch_event_data"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_query = tracker.latest_message.get("text")

        try:
            sql = generate_sql_from_gpt(user_query)
            cursor.execute(sql)
            results = cursor.fetchall()
            output = format_events(results)
        except Exception as e:
            output = f" Error: {str(e)}"

        dispatcher.utter_message(text=output)
        return []

class ActionGeneralInfo(Action):
    def name(self) -> Text:
        return "action_general_info"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_query = tracker.latest_message.get("text")

        prompt = f"""
You are an assistant that answers general questions about events.
Answer clearly in 3-4 lines.

Question: "{user_query}"
"""
        try:
            res = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.5
            )
            response = res.choices[0].message.content.strip()
        except Exception as e:
            response = f"⚠️ Error fetching info: {str(e)}"

        dispatcher.utter_message(text=response)
        return []





from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import mysql.connector
import os
import re
from datetime import datetime
from dateparser import parse as parse_date
from dotenv import load_dotenv
from openai import OpenAI

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# DB connection
db_config = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_NAME"),
    "port": 3306
}
db = mysql.connector.connect(**db_config)
cursor = db.cursor(dictionary=True)

# --- DATE HANDLING FUNCTION ---
def extract_date_sql_from_query(user_query: str) -> str:
    today = datetime.now()
    current_year = today.year
    base_sql = "SELECT * FROM events WHERE"

    # Check for a date range
    date_range = re.findall(r"(?:between|from)\s+(.*?)\s+(?:and|to)\s+(.*)", user_query, re.IGNORECASE)
    if date_range:
        start_str, end_str = date_range[0]
        start_date = parse_date(start_str + f" {current_year}")
        end_date = parse_date(end_str + f" {current_year}")
        if start_date and end_date:
            return f"{base_sql} STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i') BETWEEN '{start_date.date()}' AND '{end_date.date()}' LIMIT 10"

    # Check for a single date
    single_date = re.search(r"\d{1,2}\s+\w+|\w+\s+\d{1,2}", user_query)
    if single_date:
        parsed_date = parse_date(single_date.group() + f" {current_year}")
        if parsed_date:
            return f"{base_sql} DATE(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = '{parsed_date.date()}' LIMIT 10"

    # Month-based queries
    if "this month" in user_query.lower():
        return f"{base_sql} MONTH(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = {today.month} AND YEAR(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = {today.year} LIMIT 10"

    if "next month" in user_query.lower():
        next_month = (today.month % 12) + 1
        next_year = today.year + (1 if next_month == 1 else 0)
        return f"{base_sql} MONTH(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = {next_month} AND YEAR(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = {next_year} LIMIT 10"

    if "june" in user_query.lower():
        return f"{base_sql} MONTH(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = 6 AND YEAR(STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i')) = {today.year} LIMIT 10"

    return ""  # No clear date match

# --- GPT SQL FALLBACK ---
def generate_sql_from_gpt(user_query: str) -> str:
    prompt = f"""
You are an AI that converts natural language into MySQL SELECT queries.
The table is `events` with columns: id, title, address, lat, long, date_time, about, category_id, rating, user_id, created_at, link, visible_date, recurring, end_date, weekdays, dates, all_time, selected_weeks.
Use STR_TO_DATE(date_time, '%d/%m/%Y,%H:%i') for date comparisons.
Category mapping:
• music → 6
• sports → 3
• art → 4
• education → 5
• tech → 2
• food → 7
Only return a SELECT statement with LIMIT 10.
User query: "{user_query}"
"""
    res = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    sql = res.choices[0].message.content.strip().replace("```sql", "").replace("```", "")
    return sql

# --- FORMAT RESULTS (Manual Formatting) ---
def format_events(events: List[Dict]) -> str:
    if not events:
        return "No matching events found."

    formatted = []
    for i, event in enumerate(events, start=1):
        title = event.get("title", "N/A")
        date_time = event.get("date_time", "N/A")
        address = event.get("address", "N/A")
        link = event.get("link", "N/A")
        rating = event.get("rating", "N/A")
        about = event.get("about", "N/A")

        block = (
            f"📅 *Event {i}*\n"
            f"• *Title:* {title}\n"
            f"• *Date & Time:* {date_time}\n"
            f"• *Location:* {address}\n"
            f"• *Link:* {link}\n"
            f"• *Rating:* {rating}/5\n"
            f"• *About:* {about}\n"
        )
        formatted.append(block)

    return "\n\n".join(formatted)

# --- ACTION TO FETCH EVENT DATA ---
class ActionFetchEventData(Action):
    def name(self) -> Text:
        return "action_fetch_event_data"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_query = tracker.latest_message.get("text")

        try:
            # Step 1: Try parsing date-based SQL
            sql = extract_date_sql_from_query(user_query)

            # Step 2: Fallback to GPT-generated SQL if no date pattern
            if not sql:
                sql = generate_sql_from_gpt(user_query)

            cursor.execute(sql)
            results = cursor.fetchall()
            output = format_events(results)
        except Exception as e:
            output = f"⚠️ Error: {str(e)}"

        dispatcher.utter_message(text=output)
        return []

# --- GENERAL FAQ ACTION ---
class ActionGeneralInfo(Action):
    def name(self) -> Text:
        return "action_general_info"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_query = tracker.latest_message.get("text")

        prompt = f"""
You are an assistant that answers general questions about events.
Answer clearly in 3-4 lines.

Question: "{user_query}"
"""
        try:
            res = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.5
            )
            response = res.choices[0].message.content.strip()
        except Exception as e:
            response = f"⚠️ Error fetching info: {str(e)}"

        dispatcher.utter_message(text=response)
        return []







